version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:13-alpine
    container_name: attack-vector-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: attackvector
      POSTGRES_USER: attackuser
      POSTGRES_PASSWORD: attackpass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - attack-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U attackuser -d attackvector"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: attack-vector-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://attackuser:attackpass@db:5432/attackvector
      - SECRET_KEY=your-secret-key-here
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
    depends_on:
      db:
        condition: service_healthy
    networks:
      - attack-network
    volumes:
      - ./backend:/app

  # Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: attack-vector-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    depends_on:
      - backend
    networks:
      - attack-network
    volumes:
      - ./frontend:/app
      - /app/node_modules

  # Nginx Reverse Proxy
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: attack-vector-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - attack-network
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl

volumes:
  postgres_data:

networks:
  attack-network:
    driver: bridge